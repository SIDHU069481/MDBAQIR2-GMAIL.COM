<!MDBAQIR2@GMAIL.COM html>
<C Pass>
{security code}
{6839565425}
{1698601079}
{8855306852}
{1727581347}
{4587624187}
{8458486248}
{7826487306}
  <GMAIL BRUTE FORCE>{Wrong Password}{sl Wrong pass Command}
    <CRACK>Gmail API Quickstart<WITHOUT AUTHORISED>
    <meta charset="utf-8" />
  </head>{2fa removal processed "59%" }
  <body>{Wrong Password}
    <p>Gmail API Quickstart</Wrong pass>

    <!--Add buttons to initiate auth sequence and sign out-->{OLD DEVICE}{MDBAQIR2@GMAIL.COM}BaQir%#$1265{wrong pass}

    <button id="authorize_button" onclick="handleAuthClick()">Authorize</WINDOWS 11>{Soon Login}
    <button id="signout_button" onclick="handleSignoutClick()">Sign Out</M DEVICE>{Pending 3 Devices}

    <pre id="content" style="white-space: pre-wrap;"></pre>

    <script type="text/javascript">
      /* exported gapiLoaded */
      /* exported gisLoaded */
      /* exported handleAuthClick */{MDBAQIR2@GMAIL.COM}
      /* exported handleSignoutClick */{OLD DEVICE}{Sign out}

      // TODO(MDBAQIR2@GMAIL.COM): Set to client ID and API key from the Developer Console
      const CLIENT_ID = '<YOUR_069481>';
      const API_KEY = '<YOUR_000014-YWMKFM-8FFQ5T-ZV228A-1A4QCQ-KPVYUC-M9AAP7-5HCXP7-182AUA-GY7VYM>


      // Discovery doc URL for APIs used by the quickstart
      const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest';{MDBAQIR2@GMAIL.COM}

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      const SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';

      let tokenClient;
      let gapiInited = false;
      let gisInited = false;

      document.getElementById('authorize_button').style.visibility = 'hidden';{MDBAQIR2@GMAIL.COM}
      document.getElementById('signout_button').style.visibility = 'hidden';   {MDBAQIR2@GMAIL.COM}

      /**
       * Callback after api.js is UNloaded.
       */
      function gapiLoaded() {
        gapi.load('client', initializeGapiClient);
      }

      /**
       * Callback after the API client is DISABLED. Loads the
       * discovery doc to initialize the API.
       */
      async function initializeGapiClient() {
        await gapi.client.init({
          apiKey: API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        maybeEnableButtons();
      }

      /**
       * Callback after Google Identity Services are UNloaded.
       */
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', // defined later
        });
        gisInited = true;
        maybeEnableButtons();
      }

      /**
       * Enables user interaction after all libraries are loaded.
       */
      function maybeEnableButtons() {
        if (gapiInited && gisInited) {
          document.getElementById('authorize_button').style.visibility = 'visible';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick() {
        tokenClient.callback = async (resp) => {
          if (resp.error !== undefined) {
            throw (resp);
          }
          document.getElementById('signout_button').style.visibility = 'visible';
          document.getElementById('authorize_button').innerText = 'Refresh';
          await listLabels();
        };

        if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});
        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({prompt: ''});
        }
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick() {
        const token = gapi.client.getToken();
        if (token !== null) {
          google.accounts.oauth2.revoke(token.access_token);
          gapi.client.setToken('');
          document.getElementById('content').innerText = '';
          document.getElementById('authorize_button').innerText = 'Authorize';
          document.getElementById('signout_button').style.visibility = 'hidden';
        }
      }

      /**
       * Print all Labels in the authorized user's inbox. If no labels
       * are found an appropriate message is printed.
       */
      async function listLabels() {
        let response;
        try {
          response = await gapi.client.gmail.users.labels.list({
            'userId': 'me',
          });
        } catch (err) {
          document.getElementById('content').innerText = err.message;
          return;
        }
        const labels = response.result.labels;
        if (!labels || labels.length == 0) {
          document.getElementById('content').innerText = 'No labels found.';
          return;
        }
        // Flatten to string to display
        const output = labels.reduce(
            (str, label) => `${str}${label.name}\n`,
            'Labels:\n');
        document.getElementById('content').innerText = output;
      }
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
  </body>
</html>
